#!/bin/sh
# change this to #!/bin/ksh for AIX and Solaris
########################################################################
# RC RunLevel Entry Point
########################################################################
# Start/Stop Script for Domino on xLinux/zLinux/AIX/Solaris
# 2005-2017 Copyright by Daniel Nashed, feedback domino_unix@nashcom.de
# You may use and distribute the unmodified version of this script.
# Use at your own risk. No implied or specific warranties are given.
# You may change it for your own usage only
# Version 3.1.3 30.10.2017
########################################################################
# chkconfig: 345 66 19
# description: Lotus Domino Server (notes)

### BEGIN INIT INFO
# Provides: rc_domino
# Required-Start: $remote_fs $syslog $network sshd
# Required-Stop:  $remote_fs $syslog
# Default-Start:  3 5
# Default-Stop:   0 1 2 6
# Short-Description: IBM Lotus Domino Server (notes)
# Description:       IBM Lotus Domino Server (notes)
#       Start/Stop Script V3.1.0 for xLinux/zLinux/AIX/Solaris
#       2005-2016 Copyright by Daniel Nashed (domino_unix@nashcom.de)
### END INIT INFO

# Specify username for this Domino instance.
# Set default user to "notes" if no user is specified
if [ -z "$DOMINO_USER" ] ; then
  DOMINO_USER={{ __dom_user }}
fi

# Specify the location of the main script
DOMINO_START_SCRIPT={{ __dom_install_location }}/rc_domino_script
# switch back to old path if needed -> DOMINO_START_SCRIPT=/opt/ibm/lotus/rc_domino_script


# Starting with RHEL7 and SLES12 systemd is used.
# Define systemd name here to allow this script to start/stop Domino
# --> you have to uncomment the line and match it with the service name

# DOMINO_SYSTEMD_NAME=domino.service
{{ __enable_systemd }}

# Optional get the name from script name e.g. 'domino_notes1"
# DOMINO_USER=`basename $0 | cut -f 2 -d _`

# VERBOSE_INFO="yes"


# systemd operations for start/stop
if [ ! -z "$DOMINO_SYSTEMD_NAME" ] ; then

  if [ "$LOGNAME" = "$DOMINO_USER" ] ; then
    SWITCH_MONITOR_COMMAND=""
  else
    SWITCH_MONITOR_COMMAND="su - $DOMINO_USER  -c"
  fi

  if [ "$1" = "start" ] ; then
    echo Starting systemd "$DOMINO_SYSTEMD_NAME"
    systemctl start "$DOMINO_SYSTEMD_NAME"

    if [ "$2" = "live" ] ; then
      echo starting live console
      $SWITCH_MONITOR_COMMAND "$DOMINO_START_SCRIPT monitor"
    fi
    exit 0

  elif [ "$1" = "stop" ] ; then
    echo
    echo Stopping systemd "$DOMINO_SYSTEMD_NAME"
    echo

    if [ "$2" = "live" ] ; then
      systemctl stop "$DOMINO_SYSTEMD_NAME" &
      echo starting live console
      $SWITCH_MONITOR_COMMAND "$DOMINO_START_SCRIPT monitor"
    else
      systemctl stop "$DOMINO_SYSTEMD_NAME"
    fi
    echo
    exit 0

  elif [ "$1" = "restart" ] ; then
    if [ "$2" = "live" ] ; then
      echo Cannot invoke live console in combination with systemd. run 'monitor' separately
    fi
    echo
    echo Stopping systemd "$DOMINO_SYSTEMD_NAME"
    systemctl stop "$DOMINO_SYSTEMD_NAME"

    echo
    echo Starting systemd "$DOMINO_SYSTEMD_NAME"
    systemctl start "$DOMINO_SYSTEMD_NAME"
    echo
    exit 0

  elif [ "$1" = "statusd" ] ; then
    echo
    systemctl status "$DOMINO_SYSTEMD_NAME"
    echo
    exit 0

  elif [ "$1" = "service" ] ; then
    echo
    if [ -z "$2" ] ; then
      echo "Status"
      systemctl status "$DOMINO_SYSTEMD_NAME"
    elif [ "$2" = "status" ] ; then
      echo "Status"
      systemctl status "$DOMINO_SYSTEMD_NAME"
    elif [ "$2" = "on" ] ; then
      echo "Enabling Service"
      systemctl enable "$DOMINO_SYSTEMD_NAME"
    elif [ "$2" = "off" ] ; then
      echo "Disabling Service"
      systemctl disable "$DOMINO_SYSTEMD_NAME"
    elif [ "$2" = "add" ] ; then
      echo "Enabling Service"
      systemctl enable "$DOMINO_SYSTEMD_NAME"
    elif [ "$2" = "del" ] ; then
      echo "Disabling Service"
      systemctl disable "$DOMINO_SYSTEMD_NAME"
    else
      systemctl "$2" "$DOMINO_SYSTEMD_NAME"
    fi

    echo
    exit 0
  fi
fi

SWITCH_USER=0

# Starting a server always needs a switch to the right run-time environment
if [ "$LOGNAME" = "$DOMINO_USER" ] ; then

  if [ "$1" = "start" ] ; then
    SWITCH_USER=1
  elif [ "$1" = "restart" ] ; then
    SWITCH_USER=1
  elif [ "$1" = "restartcompact" ] ; then
    SWITCH_USER=1
  elif [ "$1" = "restartfixup" ] ; then
    SWITCH_USER=1
  fi
else
  # If you are running on non-Solaris platforms you might get away without
  # changing the user. For Solaris this is mandatory. See readme for details.
  SWITCH_USER=1
fi

if [ "$1" = "setenv" ] ; then
  echo "the 'setenv' command can be only used directly from the rc_domino_script invoked with the right user"
  exit 1
fi

# Check Linux release
if [ -e /etc/SuSE-release ] ; then
  LINUX_DISTRIBUTION=suse
elif [ -e /etc/redhat-release ] ; then
  LINUX_DISTRIBUTION=redhat
else
  LINUX_DISTRIBUTION=unknown
fi

# Special handling for RedHat start/stop
if [ "$LINUX_DISTRIBUTION" = "redhat" ] ; then

  if [ "$1" = "start" ] ; then
   start_stop=1
  elif [ "$1" = "stop" ] ; then
   start_stop=1
  elif [ "$1" = "restart" ] ; then
   start_stop=1
  elif [ "$1" = "restartcompact" ] ; then
   start_stop=1
  elif [ "$1" = "restartfixup" ] ; then
   start_stop=1
  fi

  if [ "$start_stop" = "1" ] ; then
    if [ ! -w /var/lock/subsys ] ; then
      echo "On RedHat you can only start/stop the server with root-permissions"
      exit 1
    fi
  fi
fi

if [ "$1" = "service" ] ; then
  DOMINO_SERVICE_NAME=`basename $0`

  if [ "$LINUX_DISTRIBUTION" = "suse" ] ; then

    if [ -z "$2" ] ; then
      echo "Status for Service '$DOMINO_SERVICE_NAME'"
      chkconfig --list "$DOMINO_SERVICE_NAME"
    elif [ "$2" = "status" ] ; then
      echo "Status for Service '$DOMINO_SERVICE_NAME'"
      chkconfig --list "$DOMINO_SERVICE_NAME"
    elif [ "$2" = "on" ] ; then
      echo "Enabling Service '$DOMINO_SERVICE_NAME'"
      chkconfig --add "$DOMINO_SERVICE_NAME"
      chkconfig "$DOMINO_SERVICE_NAME" on
    elif [ "$2" = "off" ] ; then
      echo "Disabling Service '$DOMINO_SERVICE_NAME'"
      chkconfig "$DOMINO_SERVICE_NAME" off
    elif [ "$2" = "add" ] ; then
      echo "Installing Service '$DOMINO_SERVICE_NAME'"
      chkconfig --add "$DOMINO_SERVICE_NAME"
    elif [ "$2" = "del" ] ; then
      echo "Removing Service '$DOMINO_SERVICE_NAME'"
      chkconfig --del "$DOMINO_SERVICE_NAME"
    else
      echo "Unknown parameter '$1' for 'service'-command"
    fi

  elif [ "$LINUX_DISTRIBUTION" = "redhat" ] ; then

    if [ -z "$2" ] ; then
      echo "Status for Service '$DOMINO_SERVICE_NAME'"
      chkconfig --list "$DOMINO_SERVICE_NAME"
    elif [ "$2" = "status" ] ; then
      echo "Status for Service '$DOMINO_SERVICE_NAME'"
      chkconfig --list "$DOMINO_SERVICE_NAME"
    elif [ "$2" = "on" ] ; then
      echo "Enabling Service '$DOMINO_SERVICE_NAME'"
      chkconfig "$DOMINO_SERVICE_NAME" on
    elif [ "$2" = "off" ] ; then
      echo "Disabling Service '$DOMINO_SERVICE_NAME'"
      chkconfig "$DOMINO_SERVICE_NAME" off
    elif [ "$2" = "add" ] ; then
      echo "Installing Service '$DOMINO_SERVICE_NAME'"
      chkconfig --add "$DOMINO_SERVICE_NAME"
    elif [ "$2" = "del" ] ; then
      echo "Removing Service '$DOMINO_SERVICE_NAME'"
      chkconfig --del "$DOMINO_SERVICE_NAME"
    else
      echo "Unknown parameter '$1' for 'service'-command"
    fi

  else
    echo "Feature only supported on Linux"
    exit 0
  fi

  exit 0
fi

# Run the main startup script
if [ "$SWITCH_USER" = "0" ] ; then
   $DOMINO_START_SCRIPT "$1" "$2" "$3" "$4" "$5" "$6"
else
  if [ "$VERBOSE_INFO" = "yes" ]; then
    echo Switching to $DOMINO_USER
  fi
  su - $DOMINO_USER -c "$DOMINO_START_SCRIPT '$1' '$2' '$3' '$4' '$5' '$6'"
fi

RETVAL=$?

# Special handling for RedHat start/stop
if [ "$LINUX_DISTRIBUTION" = "redhat" ] ; then

  if [ -z "$DOMINO_SYSTEMD_NAME" ] ; then

    # Source function library.
    . /etc/rc.d/init.d/functions

    # Determine script name. for symbolic link check real name
    script_name=$0
    link_name=`readlink $script_name`
    if [ -z "$link_name" ] ; then
      link_name=$0
    fi
    prog=`basename $link_name`

    if [ "$VERBOSE_INFO" = "yes" ]; then
      echo "Return Code: " $RETVAL
    fi

    if [ "$1" = "start" ] ; then
      touch /var/lock/subsys/$prog
    elif [ "$1" = "restart" ] ; then
      touch /var/lock/subsys/$prog
    elif [ "$1" = "stop" ] ; then
      rm -f /var/lock/subsys/$prog
    fi
  fi

fi

exit $RETVAL
